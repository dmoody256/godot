#!/usr/bin/env python

Import("env")

from core import core_builders
import methods

env.core_sources = []


# Generate AES256 script encryption key
import os

txt = "0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0"
if "SCRIPT_AES256_ENCRYPTION_KEY" in os.environ:
    key = os.environ["SCRIPT_AES256_ENCRYPTION_KEY"]
    ec_valid = True
    if len(key) != 64:
        ec_valid = False
    else:
        txt = ""
        for i in range(len(key) >> 1):
            if i > 0:
                txt += ","
            txts = "0x" + key[i * 2 : i * 2 + 2]
            try:
                int(txts, 16)
            except Exception:
                ec_valid = False
            txt += txts
    if not ec_valid:
        print("Error: Invalid AES256 encryption key, not 64 hexadecimal characters: '" + key + "'.")
        print(
            "Unset 'SCRIPT_AES256_ENCRYPTION_KEY' in your environment "
            "or make sure that it contains exactly 64 hexadecimal characters."
        )
        Exit(255)

env.Textfile(
    "script_encryption_key.gen.cpp",
    ['#include "core/config/project_settings.h"\nuint8_t script_encryption_key[32]={' + txt + "};"],
)

methods.update_version(env, env.module_version_string)
methods.write_disabled_classes(env, env["disable_classes"].split(","))
env.Append(CPPPATH=[env.Dir(".")])
# Add required thirdparty code.

thirdparty_obj = []

env_thirdparty = env.Clone()
env_thirdparty.disable_warnings()

# Misc thirdparty code: header paths are hardcoded, we don't need to append
# to the include path (saves a few chars on the compiler invocation for touchy MSVC...)
thirdparty_misc_dir = "#thirdparty/misc/"
env_thirdparty.VariantDir("misc", env.Dir(thirdparty_misc_dir), duplicate=0)
thirdparty_misc_sources = [
    # C sources
    "misc/fastlz.c",
    "misc/r128.c",
    "misc/smaz.c",
    # C++ sources
    "misc/pcg.cpp",
    "misc/polypartition.cpp",
    "misc/clipper.cpp",
    "misc/smolv.cpp",
]
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_misc_sources)

# Zlib library, can be unbundled
if env["builtin_zlib"]:
    thirdparty_zlib_dir = "#thirdparty/zlib/"
    env_thirdparty.VariantDir("zlib", env.Dir(thirdparty_zlib_dir), duplicate=0)
    thirdparty_zlib_sources = [
        "zlib/adler32.c",
        "zlib/compress.c",
        "zlib/crc32.c",
        "zlib/deflate.c",
        "zlib/infback.c",
        "zlib/inffast.c",
        "zlib/inflate.c",
        "zlib/inftrees.c",
        "zlib/trees.c",
        "zlib/uncompr.c",
        "zlib/zutil.c",
    ]

    env_thirdparty.Prepend(CPPPATH=[thirdparty_zlib_dir])
    # Needs to be available in main env too
    env.Prepend(CPPPATH=[thirdparty_zlib_dir])
    if env["target"] == "debug":
        env_thirdparty.Append(CPPDEFINES=["ZLIB_DEBUG"])

    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_zlib_sources)

# Minizip library, could be unbundled in theory
# However, our version has some custom modifications, so it won't compile with the system one
thirdparty_minizip_dir = "#thirdparty/minizip/"
thirdparty_minizip_sources = ["minizip/ioapi.c", "minizip/unzip.c", "minizip/zip.c"]
env_thirdparty.VariantDir("minizip", env.Dir(thirdparty_minizip_dir), duplicate=0)
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_minizip_sources)

# Zstd library, can be unbundled in theory
# though we currently use some private symbols
# https://github.com/godotengine/godot/issues/17374
if env["builtin_zstd"]:
    thirdparty_zstd_dir = "#thirdparty/zstd/"
    thirdparty_zstd_sources = [
        "zstd/common/debug.c",
        "zstd/common/entropy_common.c",
        "zstd/common/error_private.c",
        "zstd/common/fse_decompress.c",
        "zstd/common/pool.c",
        "zstd/common/threading.c",
        "zstd/common/xxhash.c",
        "zstd/common/zstd_common.c",
        "zstd/compress/fse_compress.c",
        "zstd/compress/hist.c",
        "zstd/compress/huf_compress.c",
        "zstd/compress/zstd_compress.c",
        "zstd/compress/zstd_double_fast.c",
        "zstd/compress/zstd_fast.c",
        "zstd/compress/zstd_lazy.c",
        "zstd/compress/zstd_ldm.c",
        "zstd/compress/zstd_opt.c",
        "zstd/compress/zstdmt_compress.c",
        "zstd/compress/zstd_compress_literals.c",
        "zstd/compress/zstd_compress_sequences.c",
        "zstd/compress/zstd_compress_superblock.c",
        "zstd/decompress/huf_decompress.c",
        "zstd/decompress/zstd_ddict.c",
        "zstd/decompress/zstd_decompress_block.c",
        "zstd/decompress/zstd_decompress.c",
    ]

    env_thirdparty.Prepend(CPPPATH=[thirdparty_zstd_dir, thirdparty_zstd_dir + "common"])
    env_thirdparty.Append(CPPDEFINES=["ZSTD_STATIC_LINKING_ONLY"])
    env.Prepend(CPPPATH=thirdparty_zstd_dir)
    # Also needed in main env includes will trigger warnings
    env.Append(CPPDEFINES=["ZSTD_STATIC_LINKING_ONLY"])
    env_thirdparty.VariantDir("zstd", env.Dir(thirdparty_zstd_dir), duplicate=0)
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_zstd_sources)


env.core_sources += thirdparty_obj


# Godot source files

env.add_source_files(env.core_sources, "*.cpp")
env.add_source_files(env.core_sources, "script_encryption_key.gen.cpp")
env.add_source_files(env.core_sources, "version_hash.gen.cpp")

# Certificates
env.Command(
    "io/certs_compressed.gen.h",
    ["#thirdparty/certs/ca-certificates.crt", env.Value(env["builtin_certs"]), env.Value(env["system_certs_path"])],
    Action(core_builders.make_certs_header, "Building ca-certificates header."),
)

# Authors
env.Command(
    "authors.gen.h", "#AUTHORS.md", Action(core_builders.make_authors_header, "Generating authors header.")
)

# Donors
env.Command("donors.gen.h", "#DONORS.md", Action(core_builders.make_donors_header, "Generating donors header."))

# License
env.Command(
    "license.gen.h",
    ["#COPYRIGHT.txt", "#LICENSE.txt"],
    Action(core_builders.make_license_header, "Generating license header."),
)

# Chain load SCsubs
SConscript("os/SCsub", duplicate=0)
SConscript("math/SCsub", duplicate=0)
SConscript("crypto/SCsub", duplicate=0)
SConscript("io/SCsub", duplicate=0)
SConscript("multiplayer/SCsub", duplicate=0)
SConscript("debugger/SCsub", duplicate=0)
SConscript("input/SCsub", duplicate=0)
SConscript("variant/SCsub", duplicate=0)
SConscript("extension/SCsub", duplicate=0)
SConscript("object/SCsub", duplicate=0)
SConscript("templates/SCsub", duplicate=0)
SConscript("string/SCsub", duplicate=0)
SConscript("config/SCsub", duplicate=0)
SConscript("error/SCsub", duplicate=0)


# Build it all as a library
lib = env.add_library("core", env.core_sources)
env.Prepend(LIBS=[lib])

# Needed to force rebuilding the core files when the thirdparty code is updated.
env.Depends(lib, thirdparty_obj)
